<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
                    http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans.xsd
                    http://www.springframework.org/schema/tx 
                    http://www.springframework.org/schema/tx/spring-tx.xsd
                    http://www.springframework.org/schema/aop 
                    http://www.springframework.org/schema/aop/spring-aop.xsd
                    http://www.springframework.org/schema/context      
                    http://www.springframework.org/schema/context/spring-context.xsd
        			http://www.springframework.org/schema/data/jpa 
        			http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
	
	<!-- 数据源开始 -->
	<bean id="dataSource2" class="com.alibaba.druid.pool.xa.DruidXADataSource"
		init-method="init" destroy-method="close">
		<property name="name" value="${dataSource.name2}" />
		<property name="url" value="${dataSource.url2}" />
		<property name="username" value="${dataSource.username2}" />
		<property name="password" value="${dataSource.password2}" />
		<property name="initialSize" value="${dataSource.initialSize}" />
		<property name="minIdle" value="${dataSource.minIdle}" />
		<property name="maxActive" value="${dataSource.maxActive}" />
		<property name="maxWait" value="${dataSource.maxWait}" />
		<property name="timeBetweenEvictionRunsMillis" value="${dataSource.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${dataSource.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${dataSource.validationQuery}" />
		<property name="testWhileIdle" value="${dataSource.testWhileIdle}" />
		<property name="testOnBorrow" value="${dataSource.testOnBorrow}" />
		<property name="testOnReturn" value="${dataSource.testOnReturn}" />
		<property name="poolPreparedStatements" value="${dataSource.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${dataSource.maxPoolPreparedStatementPerConnectionSize}" />
		<property name="useGlobalDataSourceStat" value="true" />
		<property name="filters" value="log4j" />
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
				<ref bean="wall-filter" />
				<ref bean="log-filter" /> 
			</list>
		</property>
	</bean>
	<!-- 设置jta数据源 -->
	<bean id="dataSourceXA2" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">  
	    	  <property name="xaDataSource" ref="dataSource2" ></property>
	    	  <property name="uniqueResourceName" value="xa2"/>
	    	  <property name="maxPoolSize" value="10"/>
	    	  <property name="minPoolSize" value="1"/>
	    	  <property name="reapTimeout" value="20000"/>
	</bean> 
	  
	<!-- 指定实现JPA的适配器 -->
	<bean id="jpaVendorAdapter2"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="database" value="MYSQL" />
		<property name="showSql" value="true"/>
	</bean>
	<!-- JPA实体管理器工厂 -->
	<bean id="entityManagerFactory2"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="jtaDataSource" ref="dataSourceXA2" />
		<property name="persistenceProvider" ref="persistenceProvider" />
		<property name="jpaDialect" ref="jpaDialect" />
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">${jpa.dialect2}</prop>
				<prop key="hibernate.max.fetch.depth">${jpa.max.fetch.depth}</prop>
				<prop key="hibernate.jdbc.fetch.size">${jpa.jdbc.fetch.size}</prop>
				<prop key="hibernate.jdbc.batch.size">${jpa.jdbc.batch.size}</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">${jpa.hbm2ddl.auto}</prop> -->
				<prop key="hibernate.show.sql">${jpa.show.sql}</prop>
				<prop key="hibernate.format.sql">${jpa.format.sql}</prop>
				<prop key="javax.persistence.validation.mode">${javax.persistence.validation.mode}</prop>
                <prop key="hibernate.current_session_context_class">${jta.current_session_context_class2}</prop>  
                <prop key="hibernate.transaction.factory_class">${jta.transaction.factory_class2}</prop>
				<prop key="hibernate.connection.driver.class">${jta.connection.driver.class2}</prop> 
				<prop key="hibernate.transaction.jta.platform ">com.atomikos.icatch.jta.hibernate4.AtomikosJ2eePlatform.class</prop>
				
			</props>
		</property>
		
		<property name="jpaVendorAdapter" ref="jpaVendorAdapter2" />
		<!-- 加载jpa实体类 -->
		<!-- <property name="packagesToScan" value="com.huotu.entity.data2"/> -->
		<property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml"/>
		<property name="persistenceUnitName" value="mutiDataSource2"/>
	</bean>
	
	<jpa:repositories base-package="com.huotu.dataSource2.dao" 
		entity-manager-factory-ref="entityManagerFactory2"  
		transaction-manager-ref="jtaTransactionManager"/>
	
	<!-- 配置mybatis --> 
	<bean id="sqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceXA2" />
		<!-- <property name="configLocation" value="classpath:config/mybatis-config.xml"></property> -->
		<!-- <property name="typeAliasesPackage" value="com.cbcs.entity"></property> -->
		<property name="mapperLocations" value="classpath*:com/huotu/dataSource2/mapper/xml/*.xml"></property>
	</bean>
	<bean id="mapperScannerConfigurer2" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.huotu.dataSource2.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory2" />
	</bean>
	
</beans>
