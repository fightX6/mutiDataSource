<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.huotu</groupId>
  <artifactId>mutiDataSource</artifactId>
  <packaging>war</packaging>
  <version>0.0.1-SNAPSHOT</version>
  <name>mutiDataSource Maven Webapp</name>
  <url>http://maven.apache.org</url>


	<properties>
		<!-- Common libs -->
		<dubbox_version>2.8.4</dubbox_version>
		<zookeeper_version>3.4.8</zookeeper_version>
		<zkclient_version>0.1</zkclient_version>
		<resteasy_versions>3.0.7.Final</resteasy_versions>
		<spring_version>4.2.5.RELEASE</spring_version>
		<spring_data_jpa_version>1.10.1.RELEASE</spring_data_jpa_version>
		<jpa_version>5.1.0.Final</jpa_version>
		<druid_version>1.0.18</druid_version>
		<cglib_version>3.2.2</cglib_version>
		<freemarker_version>2.3.23</freemarker_version>
		<fastjson_version>1.2.11</fastjson_version> 
		<redis_version>1.7.1.RELEASE</redis_version>
		<jedis_version>2.8.1</jedis_version>
		<aspectjrt_version>1.5.4</aspectjrt_version>
		<aspectjweaver_version>1.8.9</aspectjweaver_version>
		<cglib_nodep_version>3.2.2</cglib_nodep_version> 
		<servletApi_version>3.0.1</servletApi_version>
		<mysql_version>5.1.36</mysql_version> 
		<jtds_version>1.2.4</jtds_version>
		<mybatis_version>3.4.0</mybatis_version>  
		<mybatis_spring_version>1.3.0</mybatis_spring_version>

		<mina_version>1.1.7</mina_version>
		<httpclient_version>4.2.1</httpclient_version>
		<servlet_version>3.1.0</servlet_version>
		<jetty_version>6.1.26</jetty_version>
		<validation_version>1.0.0.GA</validation_version>
		<hibernate_validator_version>4.2.0.Final</hibernate_validator_version>
		<commons_pool_version>1.6</commons_pool_version>
		<tomcat_embed_version>8.0.11</tomcat_embed_version> 
		<!-- Log libs -->
		<slf4j_version>1.7.7</slf4j_version>
		<log4j_version>1.2.17</log4j_version>
		<logback_version>1.0.6</logback_version>
		<!-- Test libs -->
		<junit_version>4.11</junit_version>
		<!-- Build args -->
		<!--<argline>-server -Xms64m -Xmx64m -XX:PermSize=64m -XX:MaxPermSize=64m</argline> -->
		<file_encoding>UTF-8</file_encoding>
		<skip_maven_deploy>false</skip_maven_deploy>
		<updateReleaseInfo>true</updateReleaseInfo>
		<project.build.sourceEncoding>${file_encoding}</project.build.sourceEncoding>
		<project.build.directory>/WEB-INF/</project.build.directory>

		<!-- for maven compiler plugin -->
		<maven_compiler_plugin_version>3.1</maven_compiler_plugin_version>
		<java_source_version>1.7</java_source_version>
		<java_target_version>1.7</java_target_version>

		<maven_source_plugin_version>3.0.0</maven_source_plugin_version>
		<maven_jar_plugin_version>2.4</maven_jar_plugin_version>
		<maven_war_plugin_version>2.6</maven_war_plugin_version>
		<maven_install_plugin_version>2.4</maven_install_plugin_version>
		<maven_deploy_plugin_version>2.7</maven_deploy_plugin_version>
		<maven_surefire_plugin_version>2.17</maven_surefire_plugin_version>
		<maven_dependency_plugin_version>2.8</maven_dependency_plugin_version>
		<maven_resources_plugin_version>2.7</maven_resources_plugin_version>
	</properties>
	<!-- <repositories> <repository> <id>mvn</id> <url>http://mvnrepository.com/</url> 
		</repository> </repositories> -->

	<distributionManagement>
		<!-- 发布release仓库 -->
		<repository>
			<id>my-release</id>
			<name>re</name>
			<url>http://maven.consh.com/content/repositories/releases/</url>
		</repository>

		<!-- 发布快照版本 -->
		<snapshotRepository>
			<id>my-snap</id>
			<name>sn</name>
			<url>http://maven.consh.com/content/repositories/snapshots/</url>
		</snapshotRepository>
	</distributionManagement>
	<!-- 全局依赖 -->
	<dependencies>
		<!-- spring引入 spring begin -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring_version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring_version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring_version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring_version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring_version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring_version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-jpa</artifactId>
			<version>${spring_data_jpa_version}</version>
		</dependency>

		<!-- spring end -->
		<!-- 数据源引入 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>${druid_version}</version>
		</dependency>
		<!-- 动态代理 引入 -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>${cglib_version}</version>
		</dependency>
		<!--hibernate begin 没有使用hibernate的API，只是使用了它对JPA的实现 -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${jpa_version}</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${jpa_version}</version>
		</dependency>
		<!-- <dependency> <groupId>org.hibernate.common</groupId> <artifactId>hibernate-commons-annotations</artifactId> 
			<version>${jpa_version}</version> </dependency> -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>${jpa_version}</version>
		</dependency>
		<!-- hibernate end -->
		<!-- mybatis start -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>${mybatis_version}</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>${mybatis_spring_version}</version>
		</dependency>

		<!-- mybatis end -->
		<!-- redis引入 -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-redis</artifactId>
			<version>${redis_version}</version>
		</dependency>
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
			<version>2.8.1</version>
		</dependency>

		<!-- spring aop 注解包 引入 -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${aspectjrt_version}</version>
		</dependency>

		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${aspectjweaver_version}</version>
		</dependency>
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib-nodep</artifactId>
			<version>${cglib_nodep_version}</version>
		</dependency>
		<!-- fastjson 引入 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>${fastjson_version}</version>
		</dependency>
		<!-- freemarker 引入 -->
		<dependency>
			<groupId>org.freemarker</groupId>
			<artifactId>freemarker</artifactId>
			<version>${freemarker_version}</version>
		</dependency>
		<!-- servletApi -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${servletApi_version}</version>
		</dependency>
		<!-- 引入mysql的驱动包 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql_version}</version>
		</dependency>
		<!-- sql server driver -->
		<dependency>
			<groupId>net.sourceforge.jtds</groupId>
			<artifactId>jtds</artifactId>
			<version>${jtds_version}</version>
		</dependency>
		
		<!-- atomikos实现多数据源支持分布式事务管理 -->
<dependency>
    <groupId>com.atomikos</groupId>
    <artifactId>transactions-jdbc</artifactId>
    <version>4.0.3</version>
</dependency>

<dependency>
    <groupId>com.atomikos</groupId>
    <artifactId>transactions-jta</artifactId>
    <version>4.0.3</version>
</dependency>
<dependency>
    <groupId>com.atomikos</groupId>
    <artifactId>transactions-api</artifactId>
    <version>4.0.3</version>
</dependency>
<dependency>
    <groupId>com.atomikos</groupId>
    <artifactId>transactions</artifactId>
    <version>4.0.3</version>
</dependency>
<dependency>
    <groupId>com.atomikos</groupId>
    <artifactId>atomikos-util</artifactId>
    <version>4.0.3</version>
</dependency>
<dependency>
    <groupId>com.atomikos</groupId>
    <artifactId>transactions-hibernate4</artifactId>
    <version>4.0.3</version> 
</dependency>
<dependency>  
    <groupId>javax.transaction</groupId>  
    <artifactId>jta</artifactId>  
    <version>1.1</version>  
</dependency> 
		
		<!-- log4j+slf4j 日志引入 -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${slf4j_version}</version>
		</dependency>
		<!-- junit测试单元引入 -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit_version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.el</groupId>
			<artifactId>jboss-el-api_3.0_spec</artifactId>
			<version>1.0.0.Final</version>
			<scope>test</scope>
		</dependency>
		<!-- apache commons begin -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.1</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.2</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
			<version>2.4.2</version>
		</dependency>
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>1.8.3</version>
		</dependency>
		<dependency>
			<groupId>commons-logging</groupId>
	  		<artifactId>commons-logging</artifactId>
	  		<version>1.1.1</version>
		</dependency>
	</dependencies>
  <build>
    <finalName>mutiDataSource</finalName>
    <defaultGoal>compile</defaultGoal>
		<plugins><!-- <plugin> <groupId>org.apache.tomcat.maven</groupId> <artifactId>tomcat7-maven-plugin</artifactId> 
				<version>2.2</version> </plugin> -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>${maven_war_plugin_version}</version>
				<configuration>
					<webResources>
						<resource>
							<!-- this is relative to the pom.xml directory -->
							<directory> </directory>
						</resource>
					</webResources>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven_compiler_plugin_version}</version>
				<configuration>
					<source>${java_source_version}</source>
					<target>${java_target_version}</target>
					<encoding>${file_encoding}</encoding>  <!-- “编码 GBK 的不可映射字符”问题的解决 -->
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven_surefire_plugin_version}</version>
				<configuration>
					<!-- <includes> 不写匹配默认规则,TestSuit结尾，test开头的方法 <include>**/*TestSuit.java</include> 
						两个星号**用来匹配任意路径，一个星号*用来获取除路径风格符外的0个或多个字符 </includes> <excludes> <exclude>**/CollectionBillTestCase.java</exclude> 
						<exclude>**/PaymentBillTestCase.java</exclude> </excludes> -->
					<skip>false</skip>  <!-- 略过单元测试 -->
					<testFailureIgnore>true</testFailureIgnore> <!-- 当Maven 遇到一个测试失败，它默认的行为是停止当前的构建。 如果你希望继续构建项目，即使 Surefire 插件遇到了失败的单元测试，你就需要设置 
						Surefire 的testFailureIgnore 这个配置属性为 true -->
				</configuration>
			</plugin>


			<!-- 把依赖的jar包拷到lib目录下 -->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${maven_dependency_plugin_version}</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
				</executions>
			</plugin>


			<!-- 把配置文件拷到和jar包同一个路径下 -->
			<!-- 以utf-8编码拷贝配置文件，拷贝过程中是可以做变量替换的，也就是说你的配置文件可以是个模板，里面的${}所包含的内容是可以拷贝过程中替换的 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven_resources_plugin_version}</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<encoding>UTF-8</encoding>
							<outputDirectory>${project.build.directory}/classes/</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources/</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
  </build>
</project>
